/*

 Usage:
 gradle build - builds code and creates a single jar in build/libs/frostwire.jar
 gradle clean - cleans the build.
 gradle tasks - shows available tasks.

 gradle gettextExtract - extract all the strings from the sourcecode into frostwire.pot
 gradle gettextBundle  - create messages.jar with the extracted strings. 

*/
apply plugin: 'java'

sourceCompatibility = 1.7

compileJava {
    options.encoding = '8859_1'

    // raise heap
    options.fork = 'true'
    options.forkOptions.with {
        memoryMaximumSize = "2048m"
    }
}

// add third party jars to classpath.
dependencies {
    /* -compiles using lib/jars, not lib/jars-src/ sources.
    if you don't want to use jars-src, then uncomment this block
    and comment the jars-src block below so you just include these
    jars in the classpath when building.
    compile files('lib/jars/gettext-commons.jar',
                  'lib/jars/lucene-3.5.0.jar',
                  'lib/jaudiotagger.jar',
                  'lib/jars/h2-1.3.164.jar',
                  'lib/jars/messages.jar',
                  'lib/jars/slf4j-api-1.7.5.jar',
                  'lib/jars/jaudiotagger.jar',
                  'lib/jars/metadata-extractor-2.6.2.jar'
                  )
    */

    // for some reason when building gettext's source code gradle
    // is not adding ant to the classpath
    compile files('lib/jars-src/gettext-commons-0_9_5/lib/ant.jar')
}

sourceSets {
    main {
        java {
            // exclusion rules
            exclude '**/bouncycastle/**'            
            exclude '**/jman/**'
            exclude '**/systray/**'
            exclude '**/tests/**'
            exclude '**/swt/**'
            exclude '**/vuze*swing/**'

            // common/components
            srcDir 'common/components/gson'
            srcDir 'common/components/json'
            srcDir 'common/components/apache'
            srcDir 'common/components/jmdns'
            srcDir 'common/components/jdownloader'
            srcDir 'common/components/minicastle'
            srcDir 'common/components/mp4parser'
            srcDir 'common/components/httpserver'
            srcDir 'common/components/okhttp'

            srcDir 'common/vuze/azureus2/src'
            srcDir 'common/vuze/azureus3/src'
            srcDir 'common/vuze/plugins'

            // our common/components/core and vuze common wrapping/utilities.
            srcDir 'common/components/core'
            srcDir 'common/components/vuze'

            // components, alexandria (library gui), osx_stub 
            srcDir 'components/common/src/main'
            srcDir 'components/alexandria/src/main'
            srcDir 'components/osx_stub/src'

            // jars-src (other third parties dependencies, we keep their sources
            // so that we can properly create the .deb sources for debian based mantainers
            // to corroborate we build entirely from source.)
            srcDir 'lib/gettext-commons-0_9_5/src/java'
            srcDir 'lib/jars-src/gettext-commons-0_9_5/src/java'
            srcDir 'lib/jars-src/lucene-3.5.0'
            srcDir 'lib/jars-src/h2-1.3.164'
            srcDir 'lib/jars-src/jaudiotagger/src'
            srcDir 'lib/jars-src/slf4j-api/src/main/java'
            srcDir 'lib/jars-src/metadata-extractor-2.6.2-src/Source'

            srcDir 'core'
            srcDir 'gui'
        }

        resources {
            srcDir 'components/resources/src/main/resources'
            include '**/*.properties'
            include '**/*.png'
            include '**/*.gif'
            include '**/*.jpg'
            include '**/*.html'
            include '**/*.js'
            include '**/*.sh'
            include '**/*.dat'
            include '**/*.icc'
            exclude '**/*.DS_Store'

            srcDir 'common/vuze/azureus2/src'
            include '**/Messages*.properties'
            exclude '**/*.class'
            exclude '**/*.java'
        }
    }
}

jar {
    archiveName='frostwire.jar'

    exclude('META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF')

    from (zipTree('lib/jars/messages.jar')) {
        include '**/*.class'
    }

    manifest {
        attributes 'Main-Class': 'com.limegroup.gnutella.gui.Main'
    }
}

// gettext tasks

task gettextInit {
    description 'Loads and define the ant gettext related tasks'

    doLast {
        ant.taskdef(name:'gettextExtract', classname:'org.xnap.commons.ant.gettext.GettextExtractKeysTask', classpath: 'lib/jars/gettext-commons.jar')
        ant.taskdef(name:'gettextMerge', classname:'org.xnap.commons.ant.gettext.GettextMergeKeysTask', classpath: 'lib/jars/gettext-commons.jar')
        ant.taskdef(name:'gettextGenerateDefault', classname:'org.xnap.commons.ant.gettext.GenerateDefaultBundleTask', classpath: 'lib/jars/gettext-commons.jar')
        ant.taskdef(name:'gettextDist', classname:'org.xnap.commons.ant.gettext.GettextDistTask', classpath:'lib/jars/gettext-commons.jar')
    }
}

task gettextExtract {
    description 'Extracts message keys from the source code'

    doLast {
        println 'gettext extract...'
        ant.gettextExtract(keysFile:'frostwire.pot',
                           poDirectory:'lib/messagebundles',
                           keywords:'-kgetStringResource -kgetFormattedStringResource -ktrc -ktr -kmarktr -ktrn:1,2 -ktrl') {
            fileset(dir:"components") { 
                include (name:'**/*.java')
                exclude (name:'azureus/**')
            }

            fileset(dir:"core") {
                include(name:'**/*.java')
            }

            fileset(dir:"gui") {
                include(name:'**/*.java')
            }
        }

        println 'gettext merge...'
        ant.gettextMerge(keysFile:"frostwire.pot", poDirectory:"lib/messagebundles")
    }
}

task gettextBundle {
    description 'Rebuilds messages and bundles them into messages.jar'

    doLast {
        // clean up
        println 'gettext bundle...'
        println 'cleaning up...'        
        delete 'lib/messagebundles/org'

        // generate default bundle for complete messages
        println 'gettext generate default'
        ant.gettextGenerateDefault(targetBundle:'org.limewire.i18n.Messages',
                                   outputDirectory:'lib/messagebundles', 
                                   potfile:'lib/messagebundles/frostwire.pot')

        // generate complete bundles
        println 'gettext dist (complete bundles)'
        ant.gettextDist(targetBundle:'org.limewire.i18n.Messages',
                        poDirectory:'lib/messagebundles',
                        outputDirectory:'lib/messagebundles',
                        percentage:'35')

        // generate the empty en.po file without percentage
        println 'gettext dist (empty en.po file without percentage)'
        ant.gettextDist(targetBundle:'org.limewire.i18n.Messages',
                        outputDirectory:'lib/messagebundles') {
            fileset(dir:'lib/messagebundles') {
                include(name:'en.po')
            }
        }

        // jar them
        println 'jar it...'
        ant.jar(destfile:'lib/jars/messages.jar',
                basedir:'lib/messagebundles',
                includes:"org/**")

        // clean up
        println 'cleaning up...'
        delete 'lib/messagebundles/org'
    }
}

gettextExtract.dependsOn gettextInit
gettextBundle.dependsOn gettextInit